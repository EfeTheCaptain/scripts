#!/bin/bash

# Cache location
CACHE_FILE="/tmp/weather_cache.txt"
CACHE_TIME_FILE="/tmp/weather_cache_time.txt"
CURRENT_TIME=$(date +%s)
CACHE_EXPIRY=7200  # 2 hours in seconds

# Check if cache exists, and if not, create it with default values to avoid errors.
if [ ! -f "$CACHE_FILE" ] || [ ! -f "$CACHE_TIME_FILE" ]; then
    LAST_CACHE_TIME=0
else
    LAST_CACHE_TIME=$(cat "$CACHE_TIME_FILE")
fi

# If the cache is older than 2 hours, fetch new data
if (( CURRENT_TIME - LAST_CACHE_TIME > CACHE_EXPIRY )); then
    # Weather API URL and location
    LOCATION="Istanbul"
    WEATHER_URL="wttr.in/$LOCATION?format=%l\n+%c\n%C\n+%t\n+%f\n+%p\n+%m\n"
    
    # Fetch the weather data
    weather_data=$(curl -s "$WEATHER_URL")

    # Save the weather data to cache
    printf "%s" "$weather_data" > "$CACHE_FILE"
    printf "%s" "$CURRENT_TIME" > "$CACHE_TIME_FILE"
else
    # Use cached weather data
    weather_data=$(cat "$CACHE_FILE")
fi

# Extract all values at once using `IFS` (Internal Field Separator)
IFS=$'\n' read -r location icon condition temperature feels_like precipitation moonphase <<< "$weather_data"

# Clean up the icon empty spaces
clean_icon=$(echo "$icon" | sed 's/^ *//;s/ *$//')

# Determine color for feels_like
if [ "$feels_like" -lt 0 ]; then
    color="^c#1d1ad9^"
elif [ "$feels_like" -lt 10 ]; then
    color="^c#1a96d9^"
elif [ "$feels_like" -lt 20 ]; then
    color="^c#1ad9af^"
elif [ "$feels_like" -lt 30 ]; then
    color="^c#d9d91a^"
else
    color="^c#e3620b^"
fi

# Format colored output for dwmblocks
dwmblocks_output="$clean_icon ${color}${feels_like}°C^d^"

# Print dwmblocks output
echo "$dwmblocks_output"

# Format notification message
message="Location: $location\nCondition: $icon$condition\nTemperature: $temperature\nFeels Like: $feels_like°C\nPrecipitation: $precipitation\nMoon Phase: $moonphase"

# Handle clicks
case $BLOCK_BUTTON in
    1) 
        notify-send "Weather" "$message"  # Left-click → Notification
        ;;
    6) 
        st -e nvim "$0"  # Middle-click → Edit script
        ;;
esac
