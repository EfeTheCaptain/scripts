get_video_url() {
  local query="$1"

  # Ensure the query is not empty
  if [[ -z "$query" ]]; then
    echo "Error: No search query provided." >&2
    return 1
  fi

  echo "Searching for: $query"

  # Get video results from yt-dlp
  local results
  results=$(yt-dlp -j --flat-playlist "ytsearch$search_size:$query" 2>/dev/null)

  # Check if results are empty or invalid
  if [[ -z "$results" ]]; then
    echo "Error: yt-dlp returned no results." >&2
    return 1
  fi

  echo "yt-dlp results fetched."

  # Validate that the results are in a valid JSON array format
  if ! echo "$results" | jq -e 'if type == "array" then exit(0) else exit(1) end' >/dev/null 2>&1; then
    echo "Error: yt-dlp returned invalid JSON or non-array result." >&2
    return 1
  fi

  # Extract video titles and ids from the results
  local titles
  titles=$(echo "$results" | jq -r '.[] | .title + " (" + .id + ")"')

  # Ensure titles were extracted properly
  if [[ -z "$titles" ]]; then
    echo "Error: No video titles found." >&2
    return 1
  fi

  echo "Video titles extracted: "
  echo "$titles"

  # Select a video using fzf
  local selection
  selection=$(echo "$titles" | fzf --height "40%" --reverse --header="Select a video")

  # Check if a selection was made
  if [[ -z "$selection" ]]; then
    echo "Error: No video selected." >&2
    return 1
  fi

  echo "Selected video: $selection"

  # Find the index of the selected video
  local index
  index=$(echo "$titles" | grep -n "$selection" | cut -d: -f1)

  # If no index is found, return an error
  if [[ -z "$index" || "$index" -lt 1 ]]; then
    echo "Error: Unable to find the selected video index." >&2
    return 1
  fi

  echo "Selected video index: $index"

  # Extract the video URL using the index
  local url
  url=$(echo "$results" | jq -r ".[$((index-1))].url")

  # Ensure URL extraction was successful
  if [[ -z "$url" ]]; then
    echo "Error: URL extraction failed." >&2
    return 1
  fi

  # Output the selected URL
  echo "Selected URL: $url"
  echo "$url"

  return 0
}
