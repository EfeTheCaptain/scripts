#!/bin/bash

# Automatic Battery Monitor
# Continuously tracks and predicts battery time remaining

# Configuration
LOG_FILE="$HOME/.battery_history"
PREDICTION_FILE="$HOME/.battery_prediction"
UPDATE_INTERVAL=60  # Seconds between updates
LOG_LIMIT=500       # Maximum lines to keep in log file

# Initialize files
init_files() {
    [ ! -f "$LOG_FILE" ] && touch "$LOG_FILE"
    [ ! -f "$PREDICTION_FILE" ] && echo "Calculating..." > "$PREDICTION_FILE"
}

# Find battery path
find_battery() {
    for battery in /sys/class/power_supply/BAT*; do
        [ -d "$battery" ] && echo "$battery" && return
    done
    echo "ERROR: No battery found" >&2
    exit 1
}

# Get current battery info
get_battery_info() {
    local battery=$(find_battery)
    echo "$(cat "$battery/capacity"),$(cat "$battery/status"),$(date +%s)"
}

# Maintain log size
rotate_log() {
    [ $(wc -l < "$LOG_FILE") -gt $LOG_LIMIT ] && \
        tail -n $LOG_LIMIT "$LOG_FILE" > "$LOG_FILE.tmp" && \
        mv "$LOG_FILE.tmp" "$LOG_FILE"
}

# Record battery state if changed
record_state() {
    local current_info=$(get_battery_info)
    local current_percent=$(echo "$current_info" | cut -d',' -f1)
    local last_line=$(tail -n 1 "$LOG_FILE" 2>/dev/null)

    if [ -z "$last_line" ] || \
       [ "$current_percent" != "$(echo "$last_line" | cut -d',' -f1)" ] || \
       [ "$(echo "$current_info" | cut -d',' -f2)" != "$(echo "$last_line" | cut -d',' -f2)" ]; then
        echo "$current_info" >> "$LOG_FILE"
        rotate_log
    fi
}

# Format seconds into readable time
format_time() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(( (seconds % 3600) / 60 ))
    [ "$hours" -gt 0 ] && echo "${hours}h ${minutes}m" || echo "${minutes}m"
}

# Calculate time estimate
calculate_estimate() {
    local current_info=$(get_battery_info)
    local current_percent=$(echo "$current_info" | cut -d',' -f1)
    local status=$(echo "$current_info" | cut -d',' -f2)
    local now=$(echo "$current_info" | cut -d',' -f3)
    local entries=$(grep ",$status," "$LOG_FILE" | tail -n 5)

    [ -z "$entries" ] && echo "Calculating..." && return

    local total_seconds=0
    local count=0
    local prev_percent prev_time

    while read -r line; do
        local percent=$(echo "$line" | cut -d',' -f1)
        local time=$(echo "$line" | cut -d',' -f3)
        
        if [ -n "$prev_percent" ]; then
            local percent_diff=$((prev_percent - percent))
            local time_diff=$((prev_time - time))
            
            if [ "$percent_diff" -ne 0 ]; then
                local seconds_per_percent=$((time_diff / percent_diff))
                total_seconds=$((total_seconds + seconds_per_percent))
                count=$((count + 1))
            fi
        fi
        
        prev_percent=$percent
        prev_time=$time
    done <<< "$entries"

    [ "$count" -eq 0 ] && echo "Calculating..." && return

    local avg_seconds=$((total_seconds / count))

    if [ "$status" = "Discharging" ]; then
        format_time $((current_percent * avg_seconds))
    elif [ "$status" = "Charging" ]; then
        format_time $(((100 - current_percent) * avg_seconds))
    else
        echo "Ready"
    fi
}

# Display current status
display_status() {
    local info=$(get_battery_info)
    local percent=$(echo "$info" | cut -d',' -f1)
    local status=$(echo "$info" | cut -d',' -f2)
    local prediction=$(cat "$PREDICTION_FILE")

    clear
    echo "┌─────────────────────────────────┐"
    echo "│        Battery Monitor          │"
    echo "├─────────────────────────────────┤"
    printf "│ %-20s %6s%% │\n" "Charge:" "$percent"
    printf "│ %-20s %6s │\n" "Status:" "$status"
    printf "│ %-20s %6s │\n" "Prediction:" "$prediction"
    echo "└─────────────────────────────────┘"
    echo ""
    echo "Press Ctrl+C to exit"
}

# Main monitoring loop
main() {
    init_files
    trap "echo -e '\nMonitoring stopped'; exit" INT

    while true; do
        record_state
        calculate_estimate > "$PREDICTION_FILE"
        display_status
        sleep $UPDATE_INTERVAL
    done
}

main
