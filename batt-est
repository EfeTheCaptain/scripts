#!/bin/bash

# Battery Predictor with 10% Milestones
# Requires: jq (for JSON processing)

LOG_FILE="$HOME/.battery_history"
PREDICTION_FILE="$HOME/.battery_prediction"
UPDATE_INTERVAL=60
MILESTONE_STEP=10

init_files() {
    [ ! -f "$LOG_FILE" ] && touch "$LOG_FILE"
    [ ! -f "$PREDICTION_FILE" ] && echo '{"status":"init"}' > "$PREDICTION_FILE"
}

find_battery() {
    for battery in /sys/class/power_supply/BAT*; do
        [ -d "$battery" ] && echo "$battery" && return
    done
    echo "No battery found" >&2
    exit 1
}

get_battery_info() {
    local battery=$(find_battery)
    echo "$(cat "$battery/capacity"),$(cat "$battery/status"),$(date +%s)"
}

record_state() {
    local current_info=$(get_battery_info)
    local current_percent=$(echo "$current_info" | cut -d',' -f1)
    local last_line=$(tail -n 1 "$LOG_FILE" 2>/dev/null)

    if [ -z "$last_line" ] || \
       [ "$current_percent" != "$(echo "$last_line" | cut -d',' -f1)" ] || \
       [ "$(echo "$current_info" | cut -d',' -f2)" != "$(echo "$last_line" | cut -d',' -f2)" ]; then
        echo "$current_info" >> "$LOG_FILE"
    fi
}

format_time() {
    local seconds=$1
    [ "$seconds" -lt 60 ] && echo "<1m" && return
    local minutes=$(( (seconds + 30) / 60 ))  # Round to nearest minute
    echo "${minutes}m"
}

calculate_milestones() {
    local current_info=$(get_battery_info)
    local current_percent=$(echo "$current_info" | cut -d',' -f1)
    local status=$(echo "$current_info" | cut -d',' -f2)
    local entries=$(grep ",$status," "$LOG_FILE" | tail -n 5)

    [ -z "$entries" ] && echo '{"status":"'$status'","percent":'$current_percent'}' && return

    # Calculate rate
    local first_percent=$(echo "$entries" | head -1 | cut -d',' -f1)
    local first_time=$(echo "$entries" | head -1 | cut -d',' -f3)
    local last_percent=$(echo "$entries" | tail -1 | cut -d',' -f1)
    local last_time=$(echo "$entries" | tail -1 | cut -d',' -f3)
    
    local percent_diff=$((first_percent - last_percent))
    local time_diff=$((last_time - first_time))
    [ "$percent_diff" -eq 0 ] && echo '{"status":"'$status'","percent":'$current_percent'}' && return

    local secs_per_percent=$((time_diff / percent_diff))
    local prediction='{"status":"'$status'","percent":'$current_percent',"milestones":{'

    # Generate milestones
    if [ "$status" = "Discharging" ]; then
        for ((target=$((current_percent - MILESTONE_STEP)); target>=0; target-=$MILESTONE_STEP)); do
            local time=$(( (current_percent - target) * secs_per_percent ))
            prediction+='"'"$target%"'":"'"$(format_time $time)"'",'
        done
    else  # Charging
        for ((target=$((current_percent + MILESTONE_STEP)); target<=100; target+=$MILESTONE_STEP)); do
            local time=$(( (target - current_percent) * secs_per_percent ))
            prediction+='"'"$target%"'":"'"$(format_time $time)"'",'
        done
    fi

    echo "${prediction%,}}}"
}

display_status() {
    local info=$(get_battery_info)
    local percent=$(echo "$info" | cut -d',' -f1)
    local status=$(echo "$info" | cut -d',' -f2)
    local prediction=$(cat "$PREDICTION_FILE")

    clear
    echo "┌───────────────────────────────┐"
    printf "│ %-15s %10s%% │\n" "Battery:" "$percent"
    printf "│ %-15s %10s │\n" "Status:" "$status"
    echo "├───────────────────────────────┤"

    if [ "$status" = "Discharging" ]; then
        echo "│ Time remaining to:           │"
        for target in $(echo "$prediction" | jq -r '.milestones | keys[]' 2>/dev/null | sort -n); do
            printf "│ %3s %-23s │\n" "$target" "$(echo "$prediction" | jq -r ".milestones.\"$target\"")"
        done
    elif [ "$status" = "Charging" ]; then
        echo "│ Time until:                 │"
        for target in $(echo "$prediction" | jq -r '.milestones | keys[]' 2>/dev/null | sort -n); do
            printf "│ %3s %-23s │\n" "$target" "$(echo "$prediction" | jq -r ".milestones.\"$target\"")"
        done
    else
        echo "│ $status                      │"
    fi

    echo "└───────────────────────────────┘"
    printf " Updated: %-19s \n" "$(date +%H:%M:%S)"
}

main() {
    init_files
    trap "echo; exit" INT
    
    while true; do
        record_state
        calculate_milestones > "$PREDICTION_FILE"
        display_status
        sleep $UPDATE_INTERVAL
    done
}

main
