#!/bin/bash

# Battery estimation script
# Tracks time between percentage changes to predict battery behavior

LOG_FILE="$HOME/.battery_history"
PREDICTION_FILE="$HOME/.battery_prediction"

# Create log file if it doesn't exist
if [ ! -f "$LOG_FILE" ]; then
    touch "$LOG_FILE"
fi

# Get current battery info
get_battery_info() {
    if [ -d /sys/class/power_supply/BAT0 ]; then
        BAT_PATH="/sys/class/power_supply/BAT0"
    elif [ -d /sys/class/power_supply/BAT1 ]; then
        BAT_PATH="/sys/class/power_supply/BAT1"
    else
        echo "No battery found"
        exit 1
    fi

    current_percent=$(cat "${BAT_PATH}/capacity")
    status=$(cat "${BAT_PATH}/status")  # Charging/Discharging
    
    echo "$current_percent,$status,$(date +%s)"
}

# Record current battery state
record_battery_state() {
    current_info=$(get_battery_info)
    current_percent=$(echo "$current_info" | cut -d',' -f1)
    last_line=$(tail -n 1 "$LOG_FILE" 2>/dev/null)
    
    # Only log if percentage changed or status changed
    if [ -z "$last_line" ] || \
       [ "$current_percent" != "$(echo "$last_line" | cut -d',' -f1)" ] || \
       [ "$(echo "$current_info" | cut -d',' -f2)" != "$(echo "$last_line" | cut -d',' -f2)" ]; then
        echo "$current_info" >> "$LOG_FILE"
        echo "Logged new state: $current_info"  # Debug output
    fi
}

# Estimate time remaining
estimate_time() {
    current_info=$(get_battery_info)
    current_percent=$(echo "$current_info" | cut -d',' -f1)
    current_status=$(echo "$current_info" | cut -d',' -f2)
    now=$(echo "$current_info" | cut -d',' -f3)
    
    # Get last 5 relevant entries from log
    relevant_entries=$(grep ",$current_status," "$LOG_FILE" | tail -n 5)
    
    if [ -z "$relevant_entries" ]; then
        echo "Not enough data to make prediction"
        return
    fi
    
    total_seconds=0
    total_percent=0
    count=0
    
    prev_percent=""
    prev_time=""
    
    # Calculate average time per percentage point
    while read -r line; do
        percent=$(echo "$line" | cut -d',' -f1)
        time=$(echo "$line" | cut -d',' -f3)
        
        if [ -n "$prev_percent" ]; then
            percent_diff=$((prev_percent - percent))
            time_diff=$((prev_time - time))
            
            if [ "$percent_diff" -ne 0 ]; then
                seconds_per_percent=$((time_diff / percent_diff))
                total_seconds=$((total_seconds + seconds_per_percent))
                total_percent=$((total_percent + percent_diff))
                count=$((count + 1))
            fi
        fi
        
        prev_percent=$percent
        prev_time=$time
    done <<< "$relevant_entries"
    
    if [ "$count" -eq 0 ]; then
        echo "Not enough data to make prediction"
        return
    fi
    
    avg_seconds_per_percent=$((total_seconds / count))
    echo "Avg seconds per percent: $avg_seconds_per_percent"  # Debug output
    
    if [ "$current_status" = "Discharging" ]; then
        remaining_percent=$current_percent
        remaining_seconds=$((remaining_percent * avg_seconds_per_percent))
        prediction="Time remaining: $(format_seconds $remaining_seconds)"
    elif [ "$current_status" = "Charging" ]; then
        remaining_percent=$((100 - current_percent))
        remaining_seconds=$((remaining_percent * avg_seconds_per_percent))
        prediction="Time to full charge: $(format_seconds $remaining_seconds)"
    else
        prediction="Unknown battery status"
    fi
    
    # Save prediction to file
    echo "$prediction" > "$PREDICTION_FILE"
    echo "$prediction"
}

format_seconds() {
    seconds=$1
    hours=$((seconds / 3600))
    minutes=$(( (seconds % 3600) / 60 ))
    
    if [ "$hours" -gt 0 ]; then
        echo "${hours}h ${minutes}m"
    else
        echo "${minutes}m"
    fi
}

# Main program
case "$1" in
    "--record")
        record_battery_state
        ;;
    "--estimate")
        estimate_time
        ;;
    "--monitor")
        echo "Monitoring battery (Ctrl+C to stop)..."
        while true; do
            record_battery_state
            estimate_time
            cat "$PREDICTION_FILE"
            sleep 60
        done
        ;;
    *)
        echo "Usage: $0 [option]"
        echo "Options:"
        echo "  --record    Record current battery state"
        echo "  --estimate  Estimate time remaining/until full charge"
        echo "  --monitor   Continuously monitor and estimate battery"
        ;;
esac
